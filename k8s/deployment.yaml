apiVersion: v1
kind: Namespace
metadata:
  name: aks-mentions-bot
  labels:
    name: aks-mentions-bot
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aks-mentions-bot-config
  namespace: aks-mentions-bot
data:
  REPORT_SCHEDULE: "weekly"
  PORT: "8080"
  AZURE_STORAGE_CONTAINER: "mentions"
  ENABLE_CONTEXT_FILTERING: "true"
  ENABLE_SENTIMENT_ANALYSIS: "true"
  TIMEZONE: "UTC"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aks-mentions-bot-sa
  namespace: aks-mentions-bot
  annotations:
    azure.workload.identity/client-id: "${WORKLOAD_IDENTITY_CLIENT_ID}"
  labels:
    azure.workload.identity/use: "true"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aks-mentions-bot
  namespace: aks-mentions-bot
  labels:
    app: aks-mentions-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aks-mentions-bot
  template:
    metadata:
      labels:
        app: aks-mentions-bot
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: aks-mentions-bot-sa
      containers:
      - name: aks-mentions-bot
        image: ${AZURE_CONTAINER_REGISTRY_ENDPOINT}/aks-mentions-bot:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        # Azure Identity Environment Variables
        - name: AZURE_CLIENT_ID
          value: "${WORKLOAD_IDENTITY_CLIENT_ID}"
        - name: AZURE_STORAGE_ACCOUNT
          value: "${AZURE_STORAGE_ACCOUNT_NAME}"
        - name: APPLICATIONINSIGHTS_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: azure-app-insights
              key: connection-string
        envFrom:
        - configMapRef:
            name: aks-mentions-bot-config
        - secretRef:
            name: aks-mentions-bot-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: aks-mentions-bot-service
  namespace: aks-mentions-bot
  labels:
    app: aks-mentions-bot
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: aks-mentions-bot
---
# Optional: Create an ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aks-mentions-bot-ingress
  namespace: aks-mentions-bot
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - aks-mentions-bot.yourdomain.com
    secretName: aks-mentions-bot-tls
  rules:
  - host: aks-mentions-bot.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aks-mentions-bot-service
            port:
              number: 80
